# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `devise-jwt` gem.
# Please instead update this file by running `bin/tapioca gem devise-jwt`.


# Authentication library
#
# source://devise-jwt//lib/devise/jwt/version.rb#3
module Devise
  class << self
    # Yields to Warden::JWTAuth.config
    #
    # @see Warden::JWTAuth
    # @yield [Devise::JWT.config]
    #
    # source://devise-jwt//lib/devise/jwt.rb#19
    def jwt; end
  end
end

# JWT extension for devise
#
# source://devise-jwt//lib/devise/jwt/version.rb#4
module Devise::JWT
  extend ::Dry::Core::Constants
  extend ::Dry::Configurable
  extend ::Dry::Configurable::Methods
  extend ::Dry::Configurable::ClassMethods

  class << self
    # source://devise-jwt//lib/devise/jwt.rb#29
    def forward_to_warden(setting, value); end
  end
end

# Generate defaults to be used in the configuration for the Devise
# installation in a Rails app
#
# @see Warden::JWTAuth
#
# source://devise-jwt//lib/devise/jwt/defaults_generator.rb#9
class Devise::JWT::DefaultsGenerator
  # @return [DefaultsGenerator] a new instance of DefaultsGenerator
  #
  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#16
  def initialize; end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#26
  def call; end

  # Returns the value of attribute defaults.
  #
  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#10
  def defaults; end

  # Returns the value of attribute devise_mappings.
  #
  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#10
  def devise_mappings; end

  private

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#38
  def add_defaults(inspector); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#57
  def add_dispatch_requests(inspector); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#45
  def add_mapping(inspector); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#68
  def add_registration_request(inspector); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#74
  def add_revocation_requests(inspector); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#51
  def add_revocation_strategy(inspector); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#62
  def add_sign_in_request(inspector); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#88
  def registration_requests(inspector); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#92
  def requests(inspector, name); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#100
  def requests_for_format(path, methods, format); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#80
  def sign_in_requests(inspector); end

  # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#84
  def sign_out_requests(inspector); end

  class << self
    # source://devise-jwt//lib/devise/jwt/defaults_generator.rb#12
    def call; end
  end
end

# Inspect and extract information from a Devise mapping
#
# source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#6
class Devise::JWT::MappingInspector
  # @return [MappingInspector] a new instance of MappingInspector
  #
  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#9
  def initialize(scope); end

  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#46
  def formats; end

  # @return [Boolean]
  #
  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#14
  def jwt?; end

  # Returns the value of attribute mapping.
  #
  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#7
  def mapping; end

  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#37
  def methods(name); end

  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#26
  def model; end

  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#30
  def path(name); end

  # @return [Boolean]
  #
  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#22
  def registration?; end

  # Returns the value of attribute scope.
  #
  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#7
  def scope; end

  # @return [Boolean]
  #
  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#18
  def session?; end

  private

  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#69
  def default_formats; end

  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#52
  def path_parts(name); end

  # @return [Boolean]
  #
  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#59
  def routes?(name); end

  # source://devise-jwt//lib/devise/jwt/mapping_inspector.rb#63
  def sign_out_via; end
end

# Pluck to rails
#
# source://devise-jwt//lib/devise/jwt/railtie.rb#8
class Devise::JWT::Railtie < ::Rails::Railtie; end

# Pre-build revocation strategies
#
# @see Warden::JWTAuth::Interfaces::RevocationStrategy
#
# source://devise-jwt//lib/devise/jwt/revocation_strategies/jti_matcher.rb#8
module Devise::JWT::RevocationStrategies; end

# This strategy must be included in the user model.
#
# The JwtAllowlist table must include `jti`, `aud`, `exp` and `user_id`
# columns
#
# In order to tell whether a token is revoked, it just tries to find the
# `jti` and `aud` values from the token on the `allowlisted_jwts`
# table for the respective user.
#
# If the values don't exist means the token was revoked.
# On revocation, it deletes the matching record from the
# `allowlisted_jwts` table.
#
# On sign in, it creates a new record with the `jti` and `aud` values.
#
# source://devise-jwt//lib/devise/jwt/revocation_strategies/allowlist.rb#22
module Devise::JWT::RevocationStrategies::Allowlist
  extend ::ActiveSupport::Concern

  # Warden::JWTAuth::Interfaces::User#on_jwt_dispatch
  #
  # source://devise-jwt//lib/devise/jwt/revocation_strategies/allowlist.rb#41
  def on_jwt_dispatch(_token, payload); end
end

# This strategy must be included in an ActiveRecord model, and requires
# that it has a `jti` column.
#
# In order to tell whether a token is revoked, it just checks whether
# `jti` is in the table. On revocation, creates a new record with it.
#
# source://devise-jwt//lib/devise/jwt/revocation_strategies/denylist.rb#13
module Devise::JWT::RevocationStrategies::Denylist
  extend ::ActiveSupport::Concern
end

# This strategy must be included in the user model, and requires that it
# has a `jti` column. It adds the value of the `jti` column as the `jti`
# claim in dispatched tokens.
#
# In order to tell whether a token is revoked, it just compares both `jti`
# values. On revocation, it changes column value so that the token is no
# longer valid.
#
# source://devise-jwt//lib/devise/jwt/revocation_strategies/jti_matcher.rb#16
module Devise::JWT::RevocationStrategies::JTIMatcher
  extend ::ActiveSupport::Concern

  # Warden::JWTAuth::Interfaces::User#jwt_payload
  #
  # source://devise-jwt//lib/devise/jwt/revocation_strategies/jti_matcher.rb#39
  def jwt_payload; end

  private

  # source://devise-jwt//lib/devise/jwt/revocation_strategies/jti_matcher.rb#45
  def initialize_jti; end
end

# This strategy is just a null object pattern strategy, so it does not
# revoke anything
#
# source://devise-jwt//lib/devise/jwt/revocation_strategies/null.rb#10
module Devise::JWT::RevocationStrategies::Null
  class << self
    # @return [Boolean]
    # @see Warden::JWTAuth::Interfaces::RevocationStrategy#jwt_revoked?
    #
    # source://devise-jwt//lib/devise/jwt/revocation_strategies/null.rb#12
    def jwt_revoked?(_payload, _user); end

    # @see Warden::JWTAuth::Interfaces::RevocationStrategy#revoke_jwt
    #
    # source://devise-jwt//lib/devise/jwt/revocation_strategies/null.rb#17
    def revoke_jwt(_payload, _user); end
  end
end

# source://devise-jwt//lib/devise/jwt/version.rb#5
Devise::JWT::VERSION = T.let(T.unsafe(nil), String)

# Devise models
#
# @see Devise::Models
#
# source://devise-jwt//lib/devise/jwt/models/jwt_authenticatable.rb#6
module Devise::Models; end

# Model that will be authenticatable with the JWT strategy
#
# @see [Warden::JWTAuth::Interfaces::UserRepository]
# @see [Warden::JWTAuth::Interfaces::User]
#
# source://devise-jwt//lib/devise/jwt/models/jwt_authenticatable.rb#11
module Devise::Models::JwtAuthenticatable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::JwtAuthenticatable::ClassMethods

  # source://devise-jwt//lib/devise/jwt/models/jwt_authenticatable.rb#24
  def jwt_subject; end
end

# source://devise-jwt//lib/devise/jwt/models/jwt_authenticatable.rb#14
module Devise::Models::JwtAuthenticatable::ClassMethods
  # source://devise-jwt//lib/devise/jwt/models/jwt_authenticatable.rb#15
  def jwt_revocation_strategy; end

  # source://devise-jwt//lib/devise/jwt/models/jwt_authenticatable.rb#15
  def jwt_revocation_strategy=(value); end

  class << self
    # source://devise-jwt//lib/devise/jwt/models/jwt_authenticatable.rb#15
    def available_configs; end

    # source://devise-jwt//lib/devise/jwt/models/jwt_authenticatable.rb#15
    def available_configs=(_arg0); end
  end
end
